AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  text-to-kg

  SAM Template for text-to-kg

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'content-type'"
        AllowOrigin: "'*'"

Resources:
  # S3 Bucket for file uploads
  FileUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-file-uploads"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
  
  # Add this resource
  # ApiKey:
  #   Type: AWS::ApiGateway::ApiKey
  #   Properties:
  #     Name: !Sub "${AWS::StackName}-api-key"
  #     Description: "API Key for frontend access"
  #     Enabled: true

  # UsagePlan:
  #   Type: AWS::ApiGateway::UsagePlan
  #   Properties:
  #     UsagePlanName: !Sub "${AWS::StackName}-usage-plan"
  #     Description: "Usage plan for frontend"
  #     Throttle:
  #       RateLimit: 100
  #       BurstLimit: 200
  #     Quota:
  #       Limit: 10000
  #       Period: DAY
  #     ApiStages:
  #       - ApiId: !Ref ServerlessRestApi
  #         Stage: Prod

  # UsagePlanKey:
  #   Type: AWS::ApiGateway::UsagePlanKey
  #   Properties:
  #     KeyId: !Ref ApiKey
  #     KeyType: API_KEY
  #     UsagePlanId: !Ref UsagePlan


  GraphCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-graph-cache"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: share_id
          AttributeType: S
        - AttributeName: file_id
          AttributeType: S
      KeySchema:
        - AttributeName: share_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: FileIdIndex
          KeySchema:
            - AttributeName: file_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      Tags:
        - Key: Purpose
          Value: GraphCache

  ProcessUploadedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: main_app/
      Handler: process_uploaded.handler
      Runtime: python3.11
      Timeout: 900
      Environment:
        Variables:
          BUCKET_NAME: !Ref FileUploadBucket
          KG_FUNCTION_NAME: !Ref KnowledgeGraphAPI
      Policies:
      - S3ReadPolicy:
          BucketName: !Ref FileUploadBucket
      - S3WritePolicy:
          BucketName: !Ref FileUploadBucket
      - LambdaInvokePolicy:
          FunctionName: !Ref KnowledgeGraphAPI
      Layers:
      - !Ref UploadDependenciesLayer
  
  GenerateShareLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: share_link/
      Handler: generate_share_link.handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          GRAPH_CACHE_TABLE: !Ref GraphCacheTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GraphCacheTable
      Events:
        GenerateLink:
          Type: Api
          Properties:
            # RestApiId: !Ref ServerlessRestApi
            Path: /generate-share-link
            Method: post
            # Auth:
            #   ApiKeyRequired: true
        # GenerateLinkOptions:
        #   Type: Api
        #   Properties:
        #     RestApiId: !Ref ServerlessRestApi
        #     Path: /generate-share-link
        #     Method: options
        #     Auth:
        #       ApiKeyRequired: false

  ViewSharedGraphFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: share_link/
      Handler: view_shared_graph.handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          GRAPH_CACHE_TABLE: !Ref GraphCacheTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GraphCacheTable
      Events:
        ViewGraph:
          Type: Api
          Properties:
            Path: /view-graph/{share_id}
            Method: get
            # Auth:
            #   ApiKeyRequired: true
        # ViewGraphOptions:
        #   Type: Api
        #   Properties:
        #     Path: /view-graph/{share_id}
        #     Method: options
        #     Auth:
        #       ApiKeyRequired: false
  GetSavedGraphFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: share_link/
      Handler: get_saved_graph.handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          GRAPH_CACHE_TABLE: !Ref GraphCacheTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GraphCacheTable
      Events:
        GetGraph:
          Type: Api
          Properties:
            Path: /get_saved_graph/{file_id}
            Method: get

  PresignedURLFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: main_app/
      Handler: presigned_url.handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref FileUploadBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref FileUploadBucket
        - S3WritePolicy:
            BucketName: !Ref FileUploadBucket
      Events:
        PresignedURL:
          Type: Api
          Properties:
            Path: /get_presigned_url
            Method: get
            # Auth:
            #   ApiKeyRequired: true
        # PresignedUrlOptions:
        #   Type: Api
        #   Properties:
        #     Path: /get_presigned_url
        #     Method: options
        #     Auth:
        #       ApiKeyRequired: false

  HealchCheckFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: main_app/
      Handler: healthcheck.health_check
      Runtime: python3.11
      Timeout: 30
      Architectures:
        - x86_64
      
      Events:
        HealthCheck:
          Type: Api
          Properties:
            # RestApiId: !Ref ServerlessRestApi
            Path: /health_check
            Method: get
        #     Auth:
        #       ApiKeyRequired: true
        # HealthCheckOptions:
        #   Type: Api
        #   Properties:
        #     RestApiId: !Ref ServerlessRestApi
        #     Path: /health_check
        #     Method: options
        

  KnowledgeGraphAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: main_app/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
          SECRET_NAME: "openai/api-key"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "secretsmanager:GetSecretValue"
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:openai/api-key-*"
      Layers:
      - !Ref ProcessingDependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /get_knowledge_graph
            Method: post
            # Auth:
            #   ApiKeyRequired: true

  ProcessingDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: python-dependencies
      Description: Layer with pre-installed dependencies
      ContentUri: ./ml_layer/
      CompatibleRuntimes:
        - python3.11
  
  UploadDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: upload-dependencies
      Description: Layer for file parsing (PDF, Word, etc.)
      ContentUri: ./upload_layer/
      CompatibleRuntimes:
        - python3.11

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HealthCheckdApi:
    Description: "API Gateway endpoint URL for Prod stage for HealthCheck function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/health_check/"
  KnowledgeGraphApi:
    Description: "API Gateway endpoint URL for Prod stage for KnowledgeGraph function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_knowledge_graph/"
  # ApiKey:
  #   Description: "API Key for accessing protected endpoints"
  #   Value: !Ref ApiKey
  #   Export:
  #     Name: !Sub "${AWS::StackName}-ApiKey"
  # ApiBaseUrl:
  #   Description: "Base URL for the API"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  #   Export:
  #     Name: !Sub "${AWS::StackName}-ApiBaseUrl"
  
